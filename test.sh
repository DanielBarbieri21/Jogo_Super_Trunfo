#!/bin/bash

# üáßüá∑ Super Trunfo Brasil - Suite de Testes Automatizados
# Vers√£o: 2.0 Moderna
# Autor: Sistema de Testes Automatizado

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Contadores de teste
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para executar teste
run_test() {
    local test_name=$1
    local test_command=$2
    local expected_result=$3
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    print_message $BLUE "üß™ Executando: $test_name"
    
    if eval "$test_command" >/dev/null 2>&1; then
        if [ "$expected_result" = "pass" ]; then
            print_message $GREEN "‚úÖ PASSOU: $test_name"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            print_message $RED "‚ùå FALHOU: $test_name (esperava falha, mas passou)"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    else
        if [ "$expected_result" = "fail" ]; then
            print_message $GREEN "‚úÖ PASSOU: $test_name (falhou como esperado)"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            print_message $RED "‚ùå FALHOU: $test_name (esperava sucesso, mas falhou)"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    fi
    echo ""
}

# Fun√ß√£o para testar compila√ß√£o
test_compilation() {
    print_message $CYAN "üî® Testando compila√ß√£o..."
    echo ""
    
    # Teste 1: Compila√ß√£o b√°sica
    run_test "Compila√ß√£o b√°sica" "make clean && make" "pass"
    
    # Teste 2: Verificar se execut√°vel foi criado
    run_test "Execut√°vel criado" "test -f super_trunfo_moderno" "pass"
    
    # Teste 3: Verificar se execut√°vel √© execut√°vel
    run_test "Execut√°vel √© execut√°vel" "test -x super_trunfo_moderno" "pass"
    
    # Teste 4: Compila√ß√£o com debug
    run_test "Compila√ß√£o com debug" "make clean && make debug" "pass"
    
    # Teste 5: Compila√ß√£o das vers√µes legadas
    run_test "Compila√ß√£o vers√µes legadas" "make legacy" "pass"
}

# Fun√ß√£o para testar depend√™ncias
test_dependencies() {
    print_message $CYAN "üîç Testando depend√™ncias..."
    echo ""
    
    # Teste 1: GCC dispon√≠vel
    run_test "GCC dispon√≠vel" "which gcc" "pass"
    
    # Teste 2: pkg-config dispon√≠vel
    run_test "pkg-config dispon√≠vel" "which pkg-config" "pass"
    
    # Teste 3: GTK+3 dispon√≠vel
    run_test "GTK+3 dispon√≠vel" "pkg-config --exists gtk+-3.0" "pass"
    
    # Teste 4: Make dispon√≠vel
    run_test "Make dispon√≠vel" "which make" "pass"
    
    # Teste 5: Bash dispon√≠vel
    run_test "Bash dispon√≠vel" "which bash" "pass"
}

# Fun√ß√£o para testar arquivos
test_files() {
    print_message $CYAN "üìÅ Testando arquivos..."
    echo ""
    
    # Teste 1: Arquivo principal existe
    run_test "Arquivo principal existe" "test -f super_trunfo_moderno.c" "pass"
    
    # Teste 2: Makefile existe
    run_test "Makefile existe" "test -f Makefile" "pass"
    
    # Teste 3: README existe
    run_test "README existe" "test -f README.md" "pass"
    
    # Teste 4: LICENSE existe
    run_test "LICENSE existe" "test -f LICENSE" "pass"
    
    # Teste 5: Script de instala√ß√£o existe
    run_test "Script de instala√ß√£o existe" "test -f install.sh" "pass"
    
    # Teste 6: Script de instala√ß√£o √© execut√°vel
    run_test "Script de instala√ß√£o √© execut√°vel" "test -x install.sh" "pass"
    
    # Teste 7: Config.h existe
    run_test "Config.h existe" "test -f config.h" "pass"
}

# Fun√ß√£o para testar funcionalidades
test_functionality() {
    print_message $CYAN "‚öôÔ∏è Testando funcionalidades..."
    echo ""
    
    # Teste 1: Execu√ß√£o sem erros (timeout de 5 segundos)
    run_test "Execu√ß√£o sem erros" "timeout 5s ./super_trunfo_moderno --help 2>/dev/null || timeout 5s ./super_trunfo_moderno" "pass"
    
    # Teste 2: Verificar se arquivo de cartas pode ser criado
    run_test "Arquivo de cartas pode ser criado" "touch cartas_salvas.txt && rm cartas_salvas.txt" "pass"
    
    # Teste 3: Verificar se diret√≥rios podem ser criados
    run_test "Diret√≥rios podem ser criados" "mkdir -p test_dir && rmdir test_dir" "pass"
    
    # Teste 4: Verificar permiss√µes de escrita
    run_test "Permiss√µes de escrita" "touch test_file && rm test_file" "pass"
    
    # Teste 5: Verificar permiss√µes de execu√ß√£o
    run_test "Permiss√µes de execu√ß√£o" "test -x ./super_trunfo_moderno" "pass"
}

# Fun√ß√£o para testar valida√ß√£o de dados
test_data_validation() {
    print_message $CYAN "üìä Testando valida√ß√£o de dados..."
    echo ""
    
    # Teste 1: Verificar se dados dos estados est√£o corretos
    run_test "Dados dos estados corretos" "grep -q 'S√£o Paulo' super_trunfo_moderno.c" "pass"
    
    # Teste 2: Verificar se n√∫mero de estados est√° correto
    run_test "N√∫mero de estados correto" "grep -c 'estado' super_trunfo_moderno.c | grep -q '27'" "pass"
    
    # Teste 3: Verificar se dados de popula√ß√£o est√£o presentes
    run_test "Dados de popula√ß√£o presentes" "grep -q 'populacao' super_trunfo_moderno.c" "pass"
    
    # Teste 4: Verificar se dados de PIB est√£o presentes
    run_test "Dados de PIB presentes" "grep -q 'pib' super_trunfo_moderno.c" "pass"
    
    # Teste 5: Verificar se dados de √°rea est√£o presentes
    run_test "Dados de √°rea presentes" "grep -q 'area' super_trunfo_moderno.c" "pass"
}

# Fun√ß√£o para testar interface
test_interface() {
    print_message $CYAN "üñ•Ô∏è Testando interface..."
    echo ""
    
    # Teste 1: Verificar se CSS est√° presente
    run_test "CSS est√° presente" "grep -q 'gtk_css_provider' super_trunfo_moderno.c" "pass"
    
    # Teste 2: Verificar se widgets est√£o sendo criados
    run_test "Widgets est√£o sendo criados" "grep -q 'gtk_window_new' super_trunfo_moderno.c" "pass"
    
    # Teste 3: Verificar se callbacks est√£o sendo conectados
    run_test "Callbacks est√£o sendo conectados" "grep -q 'g_signal_connect' super_trunfo_moderno.c" "pass"
    
    # Teste 4: Verificar se layout est√° sendo configurado
    run_test "Layout est√° sendo configurado" "grep -q 'gtk_box_new' super_trunfo_moderno.c" "pass"
    
    # Teste 5: Verificar se notebook est√° sendo usado
    run_test "Notebook est√° sendo usado" "grep -q 'gtk_notebook_new' super_trunfo_moderno.c" "pass"
}

# Fun√ß√£o para testar sistema de build
test_build_system() {
    print_message $CYAN "üîß Testando sistema de build..."
    echo ""
    
    # Teste 1: Make clean funciona
    run_test "Make clean funciona" "make clean" "pass"
    
    # Teste 2: Make all funciona
    run_test "Make all funciona" "make all" "pass"
    
    # Teste 3: Make help funciona
    run_test "Make help funciona" "make help" "pass"
    
    # Teste 4: Make check-deps funciona
    run_test "Make check-deps funciona" "make check-deps" "pass"
    
    # Teste 5: Make info funciona
    run_test "Make info funciona" "make info" "pass"
}

# Fun√ß√£o para testar documenta√ß√£o
test_documentation() {
    print_message $CYAN "üìö Testando documenta√ß√£o..."
    echo ""
    
    # Teste 1: README tem conte√∫do
    run_test "README tem conte√∫do" "test -s README.md" "pass"
    
    # Teste 2: README tem badges
    run_test "README tem badges" "grep -q 'badge' README.md" "pass"
    
    # Teste 3: README tem se√ß√µes importantes
    run_test "README tem se√ß√µes importantes" "grep -q 'Instala√ß√£o' README.md" "pass"
    
    # Teste 4: LICENSE tem conte√∫do
    run_test "LICENSE tem conte√∫do" "test -s LICENSE" "pass"
    
    # Teste 5: LICENSE √© MIT
    run_test "LICENSE √© MIT" "grep -q 'MIT License' LICENSE" "pass"
}

# Fun√ß√£o para testar scripts
test_scripts() {
    print_message $CYAN "üìú Testando scripts..."
    echo ""
    
    # Teste 1: Script de instala√ß√£o √© v√°lido
    run_test "Script de instala√ß√£o √© v√°lido" "bash -n install.sh" "pass"
    
    # Teste 2: Script de instala√ß√£o tem shebang
    run_test "Script de instala√ß√£o tem shebang" "head -1 install.sh | grep -q '#!/bin/bash'" "pass"
    
    # Teste 3: Script de instala√ß√£o tem fun√ß√µes
    run_test "Script de instala√ß√£o tem fun√ß√µes" "grep -q 'function' install.sh" "pass"
    
    # Teste 4: Script de instala√ß√£o tem cores
    run_test "Script de instala√ß√£o tem cores" "grep -q 'RED=' install.sh" "pass"
    
    # Teste 5: Script de instala√ß√£o tem mensagens
    run_test "Script de instala√ß√£o tem mensagens" "grep -q 'print_message' install.sh" "pass"
}

# Fun√ß√£o para testar performance
test_performance() {
    print_message $CYAN "‚ö° Testando performance..."
    echo ""
    
    # Teste 1: Compila√ß√£o √© r√°pida (menos de 30 segundos)
    run_test "Compila√ß√£o √© r√°pida" "timeout 30s make clean && make" "pass"
    
    # Teste 2: Execut√°vel n√£o √© muito grande (menos de 10MB)
    run_test "Execut√°vel n√£o √© muito grande" "test -f super_trunfo_moderno && test \$(stat -c%s super_trunfo_moderno) -lt 10485760" "pass"
    
    # Teste 3: Execut√°vel n√£o √© muito pequeno (mais de 100KB)
    run_test "Execut√°vel n√£o √© muito pequeno" "test -f super_trunfo_moderno && test \$(stat -c%s super_trunfo_moderno) -gt 102400" "pass"
    
    # Teste 4: C√≥digo n√£o tem vazamentos de mem√≥ria √≥bvios
    run_test "C√≥digo n√£o tem vazamentos √≥bvios" "grep -q 'gtk_widget_destroy' super_trunfo_moderno.c" "pass"
    
    # Teste 5: C√≥digo usa recursos eficientemente
    run_test "C√≥digo usa recursos eficientemente" "grep -q 'gtk_widget_show_all' super_trunfo_moderno.c" "pass"
}

# Fun√ß√£o para testar seguran√ßa
test_security() {
    print_message $CYAN "üîí Testando seguran√ßa..."
    echo ""
    
    # Teste 1: C√≥digo n√£o tem fun√ß√µes inseguras
    run_test "C√≥digo n√£o tem fun√ß√µes inseguras" "! grep -q 'gets\|scanf\|strcpy\|strcat' super_trunfo_moderno.c" "pass"
    
    # Teste 2: C√≥digo usa fun√ß√µes seguras
    run_test "C√≥digo usa fun√ß√µes seguras" "grep -q 'strncpy\|snprintf' super_trunfo_moderno.c" "pass"
    
    # Teste 3: C√≥digo valida entrada
    run_test "C√≥digo valida entrada" "grep -q 'strlen.*== 0' super_trunfo_moderno.c" "pass"
    
    # Teste 4: C√≥digo n√£o tem buffer overflow √≥bvio
    run_test "C√≥digo n√£o tem buffer overflow √≥bvio" "! grep -q 'sprintf.*%s.*%s' super_trunfo_moderno.c" "pass"
    
    # Teste 5: C√≥digo usa constantes para tamanhos
    run_test "C√≥digo usa constantes para tamanhos" "grep -q '#define.*50' super_trunfo_moderno.c" "pass"
}

# Fun√ß√£o para testar portabilidade
test_portability() {
    print_message $CYAN "üåê Testando portabilidade..."
    echo ""
    
    # Teste 1: C√≥digo usa padr√µes POSIX
    run_test "C√≥digo usa padr√µes POSIX" "grep -q '#include.*gtk/gtk.h' super_trunfo_moderno.c" "pass"
    
    # Teste 2: C√≥digo n√£o usa fun√ß√µes espec√≠ficas do sistema
    run_test "C√≥digo n√£o usa fun√ß√µes espec√≠ficas" "! grep -q 'windows.h\|unistd.h' super_trunfo_moderno.c" "pass"
    
    # Teste 3: C√≥digo usa tipos padr√£o
    run_test "C√≥digo usa tipos padr√£o" "grep -q 'long long\|double' super_trunfo_moderno.c" "pass"
    
    # Teste 4: C√≥digo n√£o usa assembly
    run_test "C√≥digo n√£o usa assembly" "! grep -q '__asm__\|asm' super_trunfo_moderno.c" "pass"
    
    # Teste 5: C√≥digo usa bibliotecas padr√£o
    run_test "C√≥digo usa bibliotecas padr√£o" "grep -q '#include.*stdlib.h' super_trunfo_moderno.c" "pass"
}

# Fun√ß√£o para testar manutenibilidade
test_maintainability() {
    print_message $CYAN "üîß Testando manutenibilidade..."
    echo ""
    
    # Teste 1: C√≥digo tem coment√°rios
    run_test "C√≥digo tem coment√°rios" "grep -q '//' super_trunfo_moderno.c" "pass"
    
    # Teste 2: C√≥digo tem fun√ß√µes bem definidas
    run_test "C√≥digo tem fun√ß√µes bem definidas" "grep -q 'void.*(' super_trunfo_moderno.c" "pass"
    
    # Teste 3: C√≥digo usa constantes
    run_test "C√≥digo usa constantes" "grep -q '#define' super_trunfo_moderno.c" "pass"
    
    # Teste 4: C√≥digo tem estrutura clara
    run_test "C√≥digo tem estrutura clara" "grep -q 'typedef struct' super_trunfo_moderno.c" "pass"
    
    # Teste 5: C√≥digo n√£o tem fun√ß√µes muito longas
    run_test "C√≥digo n√£o tem fun√ß√µes muito longas" "wc -l super_trunfo_moderno.c | awk '{print \$1}' | awk '{print \$1 < 1000}'" "pass"
}

# Fun√ß√£o para gerar relat√≥rio
generate_report() {
    print_message $WHITE "üìä Relat√≥rio de Testes"
    print_message $YELLOW "======================"
    echo ""
    
    print_message $CYAN "üìà Estat√≠sticas:"
    echo "  Total de testes: $TESTS_TOTAL"
    echo "  Testes passaram: $TESTS_PASSED"
    echo "  Testes falharam: $TESTS_FAILED"
    echo ""
    
    local success_rate=$((TESTS_PASSED * 100 / TESTS_TOTAL))
    print_message $CYAN "üìä Taxa de sucesso: $success_rate%"
    echo ""
    
    if [ $TESTS_FAILED -eq 0 ]; then
        print_message $GREEN "üéâ Todos os testes passaram!"
        print_message $GREEN "‚úÖ Projeto est√° pronto para uso!"
    elif [ $success_rate -ge 80 ]; then
        print_message $YELLOW "‚ö†Ô∏è Maioria dos testes passou"
        print_message $YELLOW "üîß Alguns ajustes podem ser necess√°rios"
    else
        print_message $RED "‚ùå Muitos testes falharam"
        print_message $RED "üö® Projeto precisa de corre√ß√µes"
    fi
    
    echo ""
    print_message $PURPLE "üéÆ Super Trunfo Brasil - Testes Conclu√≠dos!"
}

# Fun√ß√£o principal
main() {
    print_message $WHITE "üáßüá∑ Super Trunfo Brasil - Suite de Testes"
    print_message $YELLOW "=========================================="
    echo ""
    
    # Executar todos os testes
    test_dependencies
    test_files
    test_compilation
    test_functionality
    test_data_validation
    test_interface
    test_build_system
    test_documentation
    test_scripts
    test_performance
    test_security
    test_portability
    test_maintainability
    
    # Gerar relat√≥rio
    generate_report
}

# Executar fun√ß√£o principal
main "$@"
